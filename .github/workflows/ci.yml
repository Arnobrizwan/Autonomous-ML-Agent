name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        pip install black
        black --check src/ tests/

    - name: Import sort check with isort
      run: |
        pip install isort
        isort --check-only src/ tests/

    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        pytest tests/ -v --cov=src/aml_agent --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:buildx-stable-1

    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        load: true  # Load image into Docker daemon for testing
        tags: aml-agent:latest
        cache-from: type=gha,scope=test
        cache-to: type=gha,mode=max,scope=test
        platforms: linux/amd64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        docker run --rm aml-agent:latest python -c "import aml_agent; print('Import successful')"
        docker run --rm aml-agent:latest python -c "from aml_agent.service.app import create_app; print('FastAPI app creation successful')"
        docker run --rm aml-agent:latest aml --help
        
    - name: Measure build performance
      run: |
        echo "Build performance metrics:"
        docker images aml-agent:latest --format "Image size: {{.Size}}"
        docker history aml-agent:latest --format "{{.Size}} {{.CreatedBy}}" | head -3

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: aml-agent:latest,aml-agent:${{ github.sha }}
        cache-from: type=gha,scope=prod
        cache-to: type=gha,mode=max,scope=prod
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Build single-platform image for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        load: true  # Only works with single platform
        tags: aml-agent:test
        platforms: linux/amd64
        cache-from: type=gha,scope=test
        cache-to: type=gha,mode=max,scope=test

    - name: Test production Docker image
      run: |
        echo "Testing production image..."
        docker run --rm aml-agent:test python -c "import aml_agent; print('Import successful')"
        docker run --rm aml-agent:test python -c "from aml_agent.service.app import create_app; print('FastAPI app creation successful')"
        docker run --rm aml-agent:test aml --help
        
    - name: Measure build performance
      run: |
        echo "Production build performance metrics:"
        docker images aml-agent:test --format "Image size: {{.Size}}"
        docker history aml-agent:test --format "{{.Size}} {{.CreatedBy}}" | head -5
        
    - name: Build time analysis
      run: |
        echo "Build completed successfully"
        echo "Multi-platform build: linux/amd64,linux/arm64"
        echo "Cache strategy: GitHub Actions cache with scope-based separation"

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Security check with safety
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

  documentation:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Generate documentation
      run: |
        pip install sphinx sphinx-rtd-theme
        # Add documentation generation commands here

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/aml-agent:latest
          ${{ secrets.DOCKER_USERNAME }}/aml-agent:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add staging deployment commands here
        # Example: kubectl apply -f k8s/staging/

    - name: Run smoke tests
      run: |
        echo "Running smoke tests"
        # Add smoke test commands here
        # Example: curl -f http://staging.aml-agent.com/healthz

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add production deployment commands here
        # Example: kubectl apply -f k8s/production/
