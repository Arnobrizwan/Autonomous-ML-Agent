name: Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - smoke

env:
  REPO_NAME: ${{ github.repository }}
  REPO_OWNER: ${{ github.repository_owner }}
  IMAGE_NAME: autonomous-ml-agent
  REGISTRY: ghcr.io

jobs:
  # Parallel job: Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -e .

      - name: Run linting
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics --jobs=auto
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --jobs=auto

      - name: Format check with black
        run: black --check src/ tests/

      - name: Import sort check with isort
        run: isort --check-only src/ tests/

      - name: Type check with mypy
        run: mypy src/ --ignore-missing-imports --no-error-summary

  # Parallel job: Unit Tests (fast)
  test-unit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt
          pip install pytest pytest-xdist pytest-cov
          pip install -e .

      - name: Run unit tests (parallel)
        run: |
          pytest tests/ -m "unit" -v --tb=short --maxfail=3 -n auto --cache-clear

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            .pytest_cache/
            test-results.xml

  # Parallel job: Integration Tests
  test-integration:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event_name != 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt
          pip install pytest pytest-xdist pytest-cov
          pip install -e .

      - name: Run integration tests
        run: |
          pytest tests/ -m "integration" -v --tb=short --maxfail=1

  # Parallel job: Smoke Tests (fastest)
  test-smoke:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'smoke' || github.event_name != 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt
          pip install pytest pytest-xdist pytest-cov
          pip install -e .

      - name: Run smoke tests
        run: |
          pytest tests/ -m "smoke" -v --tb=short --maxfail=1

  # Parallel job: Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt
          pip install bandit safety

      - name: Security check with bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Security check with safety
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Parallel job: Docker Build and Test
  docker-test:
    runs-on: ubuntu-latest
    needs: [test-unit, test-smoke]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.optimized
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha,scope=docker-test
          cache-to: type=gha,mode=max,scope=docker-test
          platforms: linux/amd64
          build-args: |
            INSTALL_TEST=true
            BUILDKIT_INLINE_CACHE=1

      - name: Test Docker image
        run: |
          echo "Testing Docker image..."
          docker run --rm ${{ env.IMAGE_NAME }}:test python -c "import aml_agent; print('Import successful')"
          docker run --rm ${{ env.IMAGE_NAME }}:test python -c "from aml_agent.service.app import create_app; print('FastAPI app creation successful')"
          docker run --rm ${{ env.IMAGE_NAME }}:test aml --help

      - name: Run tests in Docker
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:test python -m pytest tests/ -m smoke -v

      - name: Measure build performance
        run: |
          echo "Build performance metrics:"
          docker images ${{ env.IMAGE_NAME }}:test --format "Image size: {{.Size}}"
          docker history ${{ env.IMAGE_NAME }}:test --format "{{.Size}} {{.CreatedBy}}" | head -3

  # Build job: Production Docker image
  build:
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, docker-test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Build production Docker image (multi-platform)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.optimized
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          cache-from: type=gha,scope=prod
          cache-to: type=gha,mode=max,scope=prod
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build single-platform image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.optimized
          push: false
          load: true  # Only works with single platform
          tags: ${{ env.IMAGE_NAME }}:test
          platforms: linux/amd64
          cache-from: type=gha,scope=prod
          cache-to: type=gha,mode=max,scope=prod

      - name: Test production Docker image
        run: |
          echo "Testing production image..."
          docker run --rm ${{ env.IMAGE_NAME }}:test python -c "import aml_agent; print('Import successful')"
          docker run --rm ${{ env.IMAGE_NAME }}:test python -c "from aml_agent.service.app import create_app; print('FastAPI app creation successful')"
          docker run --rm ${{ env.IMAGE_NAME }}:test aml --help

      - name: Measure build performance
        run: |
          echo "Production build performance metrics:"
          docker images ${{ env.IMAGE_NAME }}:test --format "Image size: {{.Size}}"
          docker history ${{ env.IMAGE_NAME }}:test --format "{{.Size}} {{.CreatedBy}}" | head -5

      - name: Build time analysis
        run: |
          echo "Build completed successfully"
          echo "Multi-platform build: linux/amd64,linux/arm64"
          echo "Cache strategy: GitHub Actions cache with scope-based separation"

  # Deploy job: Push to registry and deploy
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REPO_OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.optimized
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=prod
          cache-to: type=gha,mode=max,scope=prod
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          echo "Image: ${{ steps.meta.outputs.tags }}"
          # Add staging deployment commands here
          # Example: kubectl apply -f k8s/staging/

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging"
          # Add smoke test commands here
          # Example: curl -f http://staging.aml-agent.com/healthz

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          echo "Image: ${{ steps.meta.outputs.tags }}"
          # Add production deployment commands here
          # Example: kubectl apply -f k8s/production/

      - name: Build summary
        run: |
          echo "🚀 Build and deployment completed successfully!"
          echo "📦 Image: ${{ steps.meta.outputs.tags }}"
          echo "🏷️  Tags: ${{ steps.meta.outputs.tags }}"
          echo "📊 Registry: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.IMAGE_NAME }}"